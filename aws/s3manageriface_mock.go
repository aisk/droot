// Automatically generated by MockGen. DO NOT EDIT!
// Source: s3manageriface.go

package aws

import (
	s3 "github.com/aws/aws-sdk-go/service/s3"
	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
	gomock "github.com/golang/mock/gomock"
	io "io"
)

// Mock of s3uploader interface
type Mocks3uploader struct {
	ctrl     *gomock.Controller
	recorder *_Mocks3uploaderRecorder
}

// Recorder for Mocks3uploader (not exported)
type _Mocks3uploaderRecorder struct {
	mock *Mocks3uploader
}

func NewMocks3uploader(ctrl *gomock.Controller) *Mocks3uploader {
	mock := &Mocks3uploader{ctrl: ctrl}
	mock.recorder = &_Mocks3uploaderRecorder{mock}
	return mock
}

func (_m *Mocks3uploader) EXPECT() *_Mocks3uploaderRecorder {
	return _m.recorder
}

func (_m *Mocks3uploader) Upload(_param0 *s3.PutObjectInput, _param1 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Upload", _s...)
	ret0, _ := ret[0].(*s3manager.UploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_Mocks3uploaderRecorder) Upload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Upload", _s...)
}

// Mock of s3downloader interface
type Mocks3downloader struct {
	ctrl     *gomock.Controller
	recorder *_Mocks3downloaderRecorder
}

// Recorder for Mocks3downloader (not exported)
type _Mocks3downloaderRecorder struct {
	mock *Mocks3downloader
}

func NewMocks3downloader(ctrl *gomock.Controller) *Mocks3downloader {
	mock := &Mocks3downloader{ctrl: ctrl}
	mock.recorder = &_Mocks3downloaderRecorder{mock}
	return mock
}

func (_m *Mocks3downloader) EXPECT() *_Mocks3downloaderRecorder {
	return _m.recorder
}

func (_m *Mocks3downloader) Download(_param0 io.WriterAt, _param1 *s3.GetObjectInput, _param2 ...func(*s3manager.Downloader)) (int64, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Download", _s...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_Mocks3downloaderRecorder) Download(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Download", _s...)
}
